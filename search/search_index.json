{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#bi-tiktok-business-api-master","title":"bi-tiktok-business-api-master","text":"<p>Tiktok Business API wrapper</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Something</li> <li>Something else</li> </ul>"},{"location":"api/","title":"Modules","text":""},{"location":"api/#bi_tiktok_business_api_master.client.TikTokBusinessClient","title":"<code>TikTokBusinessClient</code>","text":"<p>The main class that is used to interact with the TikTok Business API.</p> Source code in <code>bi_tiktok_business_api_master/client.py</code> <pre><code>class TikTokBusinessClient:\n\"\"\"\n\n    The main class that is used to interact with the TikTok Business API.\n\n    \"\"\"\n\n    _session = None\n    BUSINESS_URL = \"https://business-api.tiktok.com/open_api\"\n    SANDBOX_URL = \"https://sandbox-ads.tiktok.com/open_api\"\n    VERSION = \"v1.3\"\n    DEFAULT_CRED_PATH = os.path.join(os.path.expanduser(\"~\"), \"work\", \".secrets\", \"tiktok_credentials.json\")\n\n    def __init__(self, access_token, advertiser_id, sandbox=False):\n        self.__access_token = access_token\n        self.advertiser_id = advertiser_id\n        self.base_url = self.SANDBOX_URL if sandbox else self.BUSINESS_URL\n        self.base_url = self.build_url(self.base_url, self.VERSION)\n\n        if not self._session:\n            self._create_session()\n\n        self.discover_services()\n\n    ###########################################################################\n    #                          CLASS METHODS                                  #\n    ###########################################################################\n    @classmethod\n    def from_json_file(cls,\n                       advertiser_id: str,\n                       json_file_path: str = DEFAULT_CRED_PATH,\n                       sandbox: bool = False) -&gt; 'TikTokBusinessClient':\n\"\"\"\n\n        Creates a TikTokBusinessClient instance from the json file containing the credentials.\n\n        Args:\n            advertiser_id: Advertiser id to be used.\n            json_file_path: Path to the json file containing the credentials.\n            sandbox: Whether to use sandbox or not.\n\n        Returns:\n            TikTokBusinessClient instance.\n\n        \"\"\"\n        if not os.path.exists(json_file_path):\n            raise Exception(f\"File not found at {json_file_path}\")\n        with open(json_file_path, \"r\") as f:\n            data = json.load(f)\n        access_token = data[\"access_token\"]\n\n        return cls(access_token, advertiser_id, sandbox)\n\n    @classmethod\n    def from_dict(cls, data: dict) -&gt; 'TikTokBusinessClient':\n\"\"\"\n\n        Creates a TikTokBusinessClient instance from the dictionary containing the credentials.\n\n        Args:\n            data: Dictionary containing the credentials.\n\n        Returns:\n            TikTokBusinessClient instance.\n\n        \"\"\"\n        return cls(data[\"access_token\"], data[\"advertiser_id\"], data.get(\"sandbox\"))\n\n    ###########################################################################\n    #                          STATIC METHODS                                 #\n    ###########################################################################\n    @staticmethod\n    def get_advertiser_ids(json_file_path: str = DEFAULT_CRED_PATH) -&gt; list[str]:\n\"\"\"\n\n        Fetches all the advertiser ids associated with the access token.\n\n        Args:\n            json_file_path: Path to the json file containing the credentials.\n\n        Returns:\n            List of advertiser ids.\n\n        \"\"\"\n        if not os.path.exists(json_file_path):\n            raise Exception(f\"File not found at {json_file_path}\")\n        with open(json_file_path, \"r\") as f:\n            creds = json.load(f)\n\n        url = f'{TikTokBusinessClient.BUSINESS_URL}/{TikTokBusinessClient.VERSION}/oauth2/advertiser/get/'\n        params = {\n            \"secret\": creds[\"secret\"],\n            \"app_id\": creds[\"app_id\"],\n        }\n        with requests.Session() as session:\n            session.headers.update(\n                {\n                    \"Content-Type\": \"application/json\",\n                    \"Access-Token\": creds[\"access_token\"]\n                }\n            )\n            response = session.get(url, params=params)\n            if not response.ok:\n                raise Exception(f\"Error fetching advertiser ids: {response.content}\")\n            response = response.json()\n            data_list = response[\"data\"][\"list\"]\n            return [data[\"advertiser_id\"] for data in data_list]\n\n    @staticmethod\n    def _sanitize_params(params):\n        def cast_to_dtype(dictionary):\n            for key, value in dictionary.items():\n                if isinstance(value, dict):\n                    cast_to_dtype(value)\n                else:\n                    if isinstance(value, list):\n                        dictionary[key] = json.dumps(value)\n                    else:\n                        dictionary[key] = str(value)\n\n        cast_to_dtype(params)\n        return params\n\n    @staticmethod\n    def __get_module_cls(module_name, module):\n        module_name = module_name.title().replace(\"_\", \"\")\n        if hasattr(module, module_name):\n            return getattr(module, module_name)\n\n    @staticmethod\n    def build_url(base_url, service_endpoint):\n        base_url = (base_url + \"/\") if not base_url.endswith(\"/\") else base_url\n        service_endpoint = service_endpoint[1:] if service_endpoint.startswith(\"/\") else service_endpoint\n        service_endpoint = (service_endpoint + \"/\") if not service_endpoint.endswith(\"/\") else service_endpoint\n\n        return base_url + service_endpoint\n\n    ###########################################################################\n    #                          INSTANCE METHODS                               #\n    ###########################################################################\n    def _create_session(self):\n        self._session = requests.Session()\n        self._session.hooks['response'].append(self.__request_response_hook)\n        self.__set_headers({\"Access-Token\": self.__access_token})\n\n    def __set_headers(self, values):\n        self._session.headers.update(values)\n\n    def __request_response_hook(self, *args, **kwargs):\n        self._session.headers.pop(\"Content-Type\") if \"Content-Type\" in self._session.headers else None\n\n    def discover_services(self):\n\"\"\"\n\n        Discovers all the services and loads them as attributes of the client instance.\n\n        \"\"\"\n        cwd = os.path.dirname(os.path.realpath(__file__))\n        services_path = os.path.join(cwd, \"services\")\n        for importer, modname, ispkg in pkgutil.iter_modules([services_path]):\n            module = importer.find_module(modname).load_module(modname)\n            cls_instance = self.__get_module_cls(modname, module)\n            if cls_instance:\n                setattr(self, modname, cls_instance(client=self))\n                _logger.debug(f\"{modname} module loaded successfully\")\n        _logger.debug(\"Finished loading modules\")\n\n    def make_request(self, method, url, params={}, files=None):\n        params.update({\"advertiser_id\": self.advertiser_id}) if \"advertiser_id\" not in params else None\n        self.__set_headers({\"Content-Type\": \"application/json\"}) if not files else None\n        params = self._sanitize_params(params)\n        _logger.debug(method, url, params)\n        if files:\n            response = self._session.request(method, url, params=params, files=files)\n        else:\n            response = self._session.request(method, url, params=params)\n        if not response.ok:\n            return {\"code\": response.status_code, \"message\": response.content}\n\n        response = response.json()\n        return response\n\n    def make_chunked_request(self, url, params={}, files=None):\n        params.update({\"advertiser_id\": self.advertiser_id}) if \"advertiser_id\" not in params else None\n        params = self._sanitize_params(params)\n        _logger.debug(\"POST\", url, params)\n        if files:\n            response = self._session.post(url, params=params, files=files)\n        else:\n            response = self._session.post(url, params=params)\n        if not response.ok:\n            return {\"code\": response.status_code, \"message\": response.content}\n\n        response = response.json()\n        return response\n\n    def make_paginated_request(self, method, url, params={}, files=None):\n        params.update({\"page_size\": 1000}) if \"page_size\" not in params else None\n        initial_response = self.make_request(method, url, params, files)\n        if initial_response[\"code\"] == 0:\n            total_pages = initial_response[\"data\"][\"page_info\"][\"total_page\"]\n            if total_pages &gt; 1:\n                for i in range(2, total_pages + 1):\n                    params[\"page\"] = i\n                    response = self.make_request(method, url, params, files)\n                    if response[\"code\"] != 0:\n                        return response\n                    initial_response[\"data\"][\"list\"].extend(response[\"data\"][\"list\"])\n                    initial_response[\"request_id\"] = response[\"request_id\"]\n            initial_response[\"data\"].pop(\"page_info\")\n            return initial_response\n</code></pre>"},{"location":"api/#bi_tiktok_business_api_master.client.TikTokBusinessClient.discover_services","title":"<code>discover_services()</code>","text":"<p>Discovers all the services and loads them as attributes of the client instance.</p> Source code in <code>bi_tiktok_business_api_master/client.py</code> <pre><code>def discover_services(self):\n\"\"\"\n\n    Discovers all the services and loads them as attributes of the client instance.\n\n    \"\"\"\n    cwd = os.path.dirname(os.path.realpath(__file__))\n    services_path = os.path.join(cwd, \"services\")\n    for importer, modname, ispkg in pkgutil.iter_modules([services_path]):\n        module = importer.find_module(modname).load_module(modname)\n        cls_instance = self.__get_module_cls(modname, module)\n        if cls_instance:\n            setattr(self, modname, cls_instance(client=self))\n            _logger.debug(f\"{modname} module loaded successfully\")\n    _logger.debug(\"Finished loading modules\")\n</code></pre>"},{"location":"api/#bi_tiktok_business_api_master.client.TikTokBusinessClient.from_dict","title":"<code>from_dict(data)</code>  <code>classmethod</code>","text":"<p>Creates a TikTokBusinessClient instance from the dictionary containing the credentials.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>Dictionary containing the credentials.</p> required <p>Returns:</p> Type Description <code>TikTokBusinessClient</code> <p>TikTokBusinessClient instance.</p> Source code in <code>bi_tiktok_business_api_master/client.py</code> <pre><code>@classmethod\ndef from_dict(cls, data: dict) -&gt; 'TikTokBusinessClient':\n\"\"\"\n\n    Creates a TikTokBusinessClient instance from the dictionary containing the credentials.\n\n    Args:\n        data: Dictionary containing the credentials.\n\n    Returns:\n        TikTokBusinessClient instance.\n\n    \"\"\"\n    return cls(data[\"access_token\"], data[\"advertiser_id\"], data.get(\"sandbox\"))\n</code></pre>"},{"location":"api/#bi_tiktok_business_api_master.client.TikTokBusinessClient.from_json_file","title":"<code>from_json_file(advertiser_id, json_file_path=DEFAULT_CRED_PATH, sandbox=False)</code>  <code>classmethod</code>","text":"<p>Creates a TikTokBusinessClient instance from the json file containing the credentials.</p> <p>Parameters:</p> Name Type Description Default <code>advertiser_id</code> <code>str</code> <p>Advertiser id to be used.</p> required <code>json_file_path</code> <code>str</code> <p>Path to the json file containing the credentials.</p> <code>DEFAULT_CRED_PATH</code> <code>sandbox</code> <code>bool</code> <p>Whether to use sandbox or not.</p> <code>False</code> <p>Returns:</p> Type Description <code>TikTokBusinessClient</code> <p>TikTokBusinessClient instance.</p> Source code in <code>bi_tiktok_business_api_master/client.py</code> <pre><code>@classmethod\ndef from_json_file(cls,\n                   advertiser_id: str,\n                   json_file_path: str = DEFAULT_CRED_PATH,\n                   sandbox: bool = False) -&gt; 'TikTokBusinessClient':\n\"\"\"\n\n    Creates a TikTokBusinessClient instance from the json file containing the credentials.\n\n    Args:\n        advertiser_id: Advertiser id to be used.\n        json_file_path: Path to the json file containing the credentials.\n        sandbox: Whether to use sandbox or not.\n\n    Returns:\n        TikTokBusinessClient instance.\n\n    \"\"\"\n    if not os.path.exists(json_file_path):\n        raise Exception(f\"File not found at {json_file_path}\")\n    with open(json_file_path, \"r\") as f:\n        data = json.load(f)\n    access_token = data[\"access_token\"]\n\n    return cls(access_token, advertiser_id, sandbox)\n</code></pre>"},{"location":"api/#bi_tiktok_business_api_master.client.TikTokBusinessClient.get_advertiser_ids","title":"<code>get_advertiser_ids(json_file_path=DEFAULT_CRED_PATH)</code>  <code>staticmethod</code>","text":"<p>Fetches all the advertiser ids associated with the access token.</p> <p>Parameters:</p> Name Type Description Default <code>json_file_path</code> <code>str</code> <p>Path to the json file containing the credentials.</p> <code>DEFAULT_CRED_PATH</code> <p>Returns:</p> Type Description <code>list[str]</code> <p>List of advertiser ids.</p> Source code in <code>bi_tiktok_business_api_master/client.py</code> <pre><code>@staticmethod\ndef get_advertiser_ids(json_file_path: str = DEFAULT_CRED_PATH) -&gt; list[str]:\n\"\"\"\n\n    Fetches all the advertiser ids associated with the access token.\n\n    Args:\n        json_file_path: Path to the json file containing the credentials.\n\n    Returns:\n        List of advertiser ids.\n\n    \"\"\"\n    if not os.path.exists(json_file_path):\n        raise Exception(f\"File not found at {json_file_path}\")\n    with open(json_file_path, \"r\") as f:\n        creds = json.load(f)\n\n    url = f'{TikTokBusinessClient.BUSINESS_URL}/{TikTokBusinessClient.VERSION}/oauth2/advertiser/get/'\n    params = {\n        \"secret\": creds[\"secret\"],\n        \"app_id\": creds[\"app_id\"],\n    }\n    with requests.Session() as session:\n        session.headers.update(\n            {\n                \"Content-Type\": \"application/json\",\n                \"Access-Token\": creds[\"access_token\"]\n            }\n        )\n        response = session.get(url, params=params)\n        if not response.ok:\n            raise Exception(f\"Error fetching advertiser ids: {response.content}\")\n        response = response.json()\n        data_list = response[\"data\"][\"list\"]\n        return [data[\"advertiser_id\"] for data in data_list]\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install bi-tiktok-business-api-master, run this command in your terminal:</p> <pre><code>pip install bi-tiktok-business-api-master\n</code></pre> <p>This is the preferred method to install bi-tiktok-business-api-master, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-source","title":"From source","text":"<p>The source for bi-tiktok-business-api-master can be downloaded from the Github repo.</p> <p>You can either clone the public repository:</p> <pre><code>git clone git://github.com/bidev01/bi-tiktok-business-api-master\n</code></pre> <p>Or download the tarball:</p> <pre><code>curl -OJL https://github.com/bidev01/bi-tiktok-business-api-master/tarball/main\n</code></pre> <p>Once you have a copy of the source, you can install it with:</p> <pre><code>pip install .\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>For more information about the API (params, columns), see the API.</p>"},{"location":"usage/#apis","title":"APIs","text":""},{"location":"usage/#get-report","title":"Get report","text":"<pre><code>from bi_tiktok_business_api_master import TikTokBusinessClient\n\ncredentials_path = '/home/credentials.json'\n\nadvertiser_ids = TikTokBusinessClient.get_advertiser_ids(credentials_path)\nclient = TikTokBusinessClient.from_json_file(advertiser_id=advertiser_ids[0],\n                                             json_file_path=credentials_path)\nreport = client.report.get_synchronous_report(\n    {\n        \"report_type\": \"BASIC\",\n        \"data_level\": \"AUCTION_ADGROUP\",\n        \"dimensions\": [\"stat_time_day\", \"country_code\", \"adgroup_id\"],\n        \"metrics\": [\"spend\", \"impressions\", \"clicks\", \"conversion\", \"app_install\"],\n        'start_date': '2023-09-03',\n        'end_date': '2023-09-06',\n    }\n)\n\nprint(report)\n</code></pre>"},{"location":"usage/#get-ad-groups-of-an-advertiser","title":"Get ad groups of an advertiser","text":"<pre><code>from bi_tiktok_business_api_master import TikTokBusinessClient\n\ncredentials_path = '/home/credentials.json'\n\nadvertiser_ids = TikTokBusinessClient.get_advertiser_ids(credentials_path)\nclient = TikTokBusinessClient.from_json_file(advertiser_id=advertiser_ids[0],\n                                             json_file_path=credentials_path)\n\nad_groups = client.ad_group.get_ad_groups(\n    {\n        'fields': [\n            \"create_time\",\n            \"campaign_id\",\n            \"campaign_name\",\n            \"adgroup_id\",\n            \"adgroup_name\",\n            \"app_id\",\n            \"app_download_url\"\n        ]\n    }\n)\n</code></pre>"}]}